"""
Дизайнер на електронни системи работи върху софтуер за управление на лампи в интелигентна сграда.
Всяка лампа се контролира чрез уникален сигнал, който се представя като число, където всяка битова позиция съответства на различен параметър на лампата,
като светлинен режим. Програмистът иска да може да превключва светлинния режим на определена лампа от включен на изключен и обратно.
Превключването трябва да се извършва чрез инвертиране на бита на определена позиция в числото, представляващо състоянието на лампата.

Input Format

На първия ред се подава броят на тестовите примери T.
За всеки тест: Един ред, съдържащ цяло число X и индекс на бита N,
който трябва да бъде инвертиран (битовете се броят от 0).

Constraints

1 ≤ T ≤ 100 0 ≤ X ≤ 10^9 0 ≤ N ≤ 3

Output Format

За всеки тест изведете новото число, след като битът на съответната позиция бъде инвертиран.

Sample Input 0

3
2 1
3 0
5 2
Sample Output 0

0
2
1
"""


def invert(num: int, index: int) -> int:
    binary = bin(num)[2:]
    binary = list(binary[::-1])
    binary[index] = "1" if binary[index] == "0" else "0"
    return int("".join(binary[::-1]), 2)


t = int(input())

cases = []
for _ in range(t):
    x, n = map(int, input().split())
    cases.append((x, n))

for case in cases:
    print(invert(*case))

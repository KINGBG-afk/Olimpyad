"""
Един град има n квартала, свързани с пътна мрежа.
Разстоянията между всеки два квартала са известни.
Кметството планира да изгради 4 центъра за спешна помощ, като целта е да се изберат 4 различни квартала така,
че сумата от разстоянията между всички двойки от тези квартали да бъде възможно най-малка.

Input Format

На първия ред е дадено числото n (4≤n≤300) – броят на кварталите в града.
Следват n реда, всеки с n числа, където A[i][j] (0≤A[i][j]≤106) представлява разстоянието между кварталите i и j.
Разстоянието от един квартал до себе си е винаги 0: A[i][i]=0. Разстоянията са симетрични: A[i][j]=A[j][i] за всяко i и j.

Constraints

4≤n≤300 – брой на кварталите. 0≤A[i][j]≤10^6 – разстоянията между кварталите.
A[i][i]=0 за всяко i. A[i][j]=A[j][i]

Output Format

На един ред изведете едно цяло число – минималната възможна сума от разстоянията между всички двойки
от избраните 4 квартала.

Sample Input 0

5
0 2 3 4 5
2 0 1 2 3
3 1 0 2 3
4 2 2 0 1
5 3 3 1 0
Sample Output 0

12
Explanation 0

Ако изберем кварталите 1, 2, 3 и 4, минималната сума от разстоянията между всички двойки е:
A[1][2] + A[1][3] + A[1][4] + A[2][3] + A[2][4] + A[3][4] = 2 + 3 + 4 + 1 + 2 + 0 = 12

Sample Input 1

4
0 1 2 3
1 0 4 5
2 4 0 6
3 5 6 0
Sample Output 1

21
Explanation 1

Избираме всичките 4 квартала, защото минималната сума от разстоянията между тях е:
A[1][2] + A[1][3] + A[1][4] + A[2][3] + A[2][4] + A[3][4] = 1 + 2 + 3 + 4 + 5 + 6 = 21
"""

from itertools import combinations


def minimal_costs(n: int, ls: list[list[int]]) -> int:
    min_sum = float("inf")
    for k1, k2, k3, k4 in combinations(range(n), 4):
        current_sum = (
            ls[k1][k2] + ls[k1][k3] + ls[k1][k4] + ls[k2][k3] + ls[k2][k4] + ls[k3][k4]
        )
        min_sum = min(min_sum, current_sum)

    return min_sum


n = int(input())
ls = [list(map(int, input().split())) for _ in range(n)]
print(minimal_costs(n, ls))

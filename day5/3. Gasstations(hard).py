"""
Фирма има N бензиностанции. 
Всяка седмица нейна цистерна извършва зареждането им тръгвайки от нейната централна складова база за горива, 
минавайки през всички бензиностанции и връщайки се обратно в нея. 
Помогнете на шофьора на цистерната да пресметне дължината на най-краткия път, по който той да извърши зареждането.

Input Format

На първият ред ще получите броя на тестовете – Т.
На първият ред от всеки тест ще получите броя на бензиностанциите N (централната база не се включва в N).
На следващият ред ще получите най-кратките разстояния S0,j от централната база до всички бензиностанции, подредени по нарастващ ред на номерата на бензиностанциите.
На следващите N – 1 реда ще получите най-кратките разстоянията Sk,j от поредната бензиностанция K (започвайки от първата във възходящ ред) 
до всички останали N – K бензиностанции с по-голям номер, подредени по нарастващ ред на номерата на бензиностанциите.
Всички пътища са двупосочни.
Не е възможно от една бензиностанция да стигнем до друга за по кратък път от този, който е зададен в тестовите данни за съответната двойка бензиностанции.

Constraints

1 ≤ Т ≤ 10 1 ≤ N ≤ 17 1 ≤ Si,j (разстояние между две бензиностанции – цяло число) ≤ 1500

Output Format

За всеки тест изведете на отделен ред дължината на най-краткия път, по който можем да минем през всички бензиностанции,
започвайки от централната база и завършвайки пак в нея.

Sample Input 0

1
4
11 13 22 7
15 18 17
11 11
22
Sample Output 0

58
Explanation 0

Най-краткият маршрут минава през бензиностанциите 1, 3, 2 и 4 и е с дължина 11 + 18 + 11 + 11 + 7 = 58
"""

from functools import lru_cache


def tsp(n, dist) -> float:
    all_visited = (1 << n) - 1

    @lru_cache(None)
    def dp(mask, last) -> float:
        if mask == all_visited:
            return dist[last][0]

        best = float("inf")
        for next in range(n):
            if not (mask & (1 << next)):
                best = min(best, dist[last][next] + dp(mask | (1 << next), next))
        return best

    return dp(1, 0)


cases = []
t = int(input())
for _ in range(t):
    n = int(input())
    base_dis = list(map(int, input().split()))

    distance = [[0] * (n + 1) for _ in range(n + 1)]

    # from base to stations
    for j in range(n):
        distance[0][j + 1] = base_dis[j]
        distance[j + 1][0] = base_dis[j]

    for i in range(1, n):
        row = list(map(int, input().split()))
        for j, d in enumerate(row, i + 1):
            distance[i][j] = d
            distance[j][i] = d

    print(tsp(n + 1, distance))
